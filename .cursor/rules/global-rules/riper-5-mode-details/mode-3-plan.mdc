---
description: "Contains detailed rules for the PLAN phase of the RIPER-5 protocol."
globs: 
alwaysApply: false
---

### Mode 3: PLAN
<a id="mode-3-plan"></a>

**Purpose**: Create exhaustive technical specifications

**Core Thinking Application**:
- Apply systems thinking to ensure comprehensive solution architecture
- Use critical thinking to evaluate and optimize the plan
- Develop thorough technical specifications
- Ensure goal focus, connecting all plans back to the original requirements

**Allowed**:
- Detailed plans with exact file paths
- Precise function names and signatures
- Specific change specifications
- Complete architectural overview
- Using file tools to write or update the 'Implementation Plan' section within `Task-Analysis-Solution-Plan.md` located in the `current_task_path`.

**Forbidden**:
- Any implementation or code writing
- Not even "example code" can be implemented
- Skipping or simplifying specifications

**Planning Protocol Steps**:
1.  Review 'Analysis' and 'Proposed Solution' sections from `Task-Analysis-Solution-Plan.md` and any 'Task Progress' history from `Task-Plan-Management.md` within the `current_task_path` to ensure comprehensive understanding and continuity.
2.  Detail the next changes meticulously based on the chosen solution.
3.  Provide clear rationale and detailed description for each part of the plan.
    ```
    [Change Plan Component]
    - Target: [File to be changed, module, function, etc.]
    - Rationale: [Explanation for this specific part of the plan]
    - Specification: [Detailed changes]
    ```
4.  Convert the entire detailed plan into a numbered, sequential **Implementation Checklist**, with each atomic operation as a separate item.
5.  Document the complete detailed plan, including the rationale, change specifications, and the final Implementation Checklist, into the 'Implementation Plan' section of `Task-Analysis-Solution-Plan.md` within the `current_task_path`.

**Required Planning Elements**:
- File paths and component relationships
- Function/class modifications and their signatures
- Data structure changes
- Error handling strategies
- Complete dependency management
- Testing approaches

**Mandatory Final Step** (as part of Planning Protocol Step 4 & 5):
Convert the entire plan into a numbered, sequential checklist, and ensure this checklist is part of the 'Implementation Plan' section in `Task-Analysis-Solution-Plan.md`.

**Checklist Format**:
```
Implementation Checklist:
1. [Specific action 1]
2. [Specific action 2]
...
n. [Final action]
```

**Thinking Process**:
```md
Thinking Process: Hmm... [Systems Thinking: Ensuring the plan covers all affected modules. Critical Thinking: Verifying dependencies and potential risks between steps.]
```

**Output Format**:
Start with `[MODE: PLAN]`. The response MUST include:
1.  The completed **Thinking Process** section.
2.  Confirmation of the `current_task_path` being used.
3.  The detailed technical specifications and rationale (which should mirror what's documented in `Task-Analysis-Solution-Plan.md`).
4.  The final **Implementation Checklist** as a numbered, sequential list.
(The entire plan, including the checklist, MUST also be documented in the 'Implementation Plan' section of `Task-Analysis-Solution-Plan.md`).
Use markdown syntax for formatting answers.

**Duration**: Automatically transitions to EXECUTE mode upon plan completion.
